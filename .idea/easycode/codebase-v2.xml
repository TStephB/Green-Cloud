<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/data/posts.json;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/data/users.json;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/sensors/bmp280_reader.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/sensors/dht22_reader.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/sensors/sct013_reader.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/data-collector/app.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/static/css/styles.css;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/base.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/feed.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/greenmeter.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/home.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/load_simulator.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/login.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/manual_control.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/ml_control.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/register.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/sensors.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/templates/workflow.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/frontend/frontend.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/ml-controller/collect_data.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/ml-controller/Entrainement Modele_Unique.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/services/ml-controller/Entrainement Multimodel.py;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/templates/login.html;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud&quot;:&quot;{\&quot;/sensors/sct013_reader.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`spidev.SpiDev()`: Initializes the SPI communication.\\n\\n`lire_adc(channel)`: Reads the analog value of a MCP3008 channel.\\n\\n`lire_courant(channel, calibration\\u003d60.6)`: Calculates the RMS current measured by the SCT-013 sensor.\\n\\nThe file sets up the SPI communication, defines functions to read the analog value and calculate the current, and then enters a loop that continuously measures and prints the current.\&quot;,\&quot;/services/frontend/templates/manual_control.html\&quot;:\&quot;This file does not contain any classes or functions. It is a Jinja2 template file that extends the \\u0027base.html\\u0027 template and defines the content block for a \\u0027Manual Control\\u0027 page. The page contains a heading and a placeholder paragraph.\&quot;,\&quot;/templates/login.html\&quot;:\&quot;This file appears to be a Jinja2 template for a login page. It does not contain any classes or functions, but rather defines the structure and content of the login page.\\n\\nThe file extends the \\u0027base.html\\u0027 template, which likely contains the overall structure and layout of the web page. The `{% block content %}` section defines the specific content for the login page, which includes a heading and a form with fields for username and password, as well as a submit button.\\n\\nWhen a user submits the form, the data is sent to the server using the POST method, where it can be processed and authenticated.\&quot;,\&quot;/services/frontend/templates/feed.html\&quot;:\&quot;This file appears to be a Django template file that displays a feed of user posts. It does not contain any classes or functions, but rather defines the structure and content of the feed page.\\n\\nThe file performs the following tasks:\\n\\n1. Extends the \\u0027base.html\\u0027 template, which likely contains the overall layout and structure of the web page.\\n2. Defines the \\u0027content\\u0027 block, which is the main content area of the page.\\n3. Displays a heading \\u0027Feed\\u0027 and an optional warning message.\\n4. Includes a form for users to create new posts, with a textarea for the post text and a submit button.\\n5. Iterates over a list of posts and displays each post\\u0027s username and text in a card-like format.\&quot;,\&quot;/services/data-collector/app.py\&quot;:\&quot;This file is a Flask application that provides a simple API for a social media platform. It includes the following functions:\\n\\n`load_json`: Loads JSON data from a file, or returns an empty list if the file doesn\\u0027t exist.\\n`save_json`: Saves JSON data to a file.\\n`register`: Allows users to register by creating a new user account.\\n`login`: Allows users to log in by verifying their username and password.\\n`post`: Allows users to create a new post.\\n`get_posts`: Retrieves all the posts in the system.\\n\\nThe file sets up the Flask application, defines the routes and their corresponding functions, and handles the storage and retrieval of user and post data using JSON files.\&quot;,\&quot;/services/frontend/templates/ml_control.html\&quot;:\&quot;This file appears to be a Django template that displays an energy control dashboard. It does not contain any classes or functions, but rather a HTML structure with embedded JavaScript code to render various charts and visualizations. The main components of the file are:\\n\\n`{% extends \\u0027base.html\\u0027 %}`: Extends the base HTML template.\\n`{% block content %}`: Defines the content block that will be inserted into the base template.\\n`\\u003cdiv class\\u003d\\\&quot;container\\\&quot;\\u003e`: The main container for the dashboard content.\\n`\\u003cdiv class\\u003d\\\&quot;row g-4 mb-4\\\&quot;\\u003e`: Rows and columns for the dashboard cards.\\n`\\u003cdiv class\\u003d\\\&quot;card h-100\\\&quot;\\u003e`: Cards for displaying the current prediction, energy availability, and model insights.\\n`\\u003cscript src\\u003d\\\&quot;https://cdn.jsdelivr.net/npm/chart.js\\\&quot;\\u003e\\u003c/script\\u003e`: Includes the Chart.js library for rendering the visualizations.\\n`\\u003cscript\\u003e`: JavaScript code to initialize and configure the various charts on the page.\\n\\nThe file provides a visually appealing and interactive dashboard for monitoring and controlling an energy system, with features such as current energy prediction, energy availability, model details, and performance visualizations.\&quot;,\&quot;/sensors/dht22_reader.py\&quot;:\&quot;This file does not contain any classes or functions. Instead, it is a Python script that reads temperature and humidity data from a DHT22 sensor connected to GPIO pin 4 on a Raspberry Pi or similar device, and prints the readings to the console every 2 seconds.\\n\\nThe script uses the Adafruit_DHT library to interact with the sensor, and the time module to add a delay between readings.\&quot;,\&quot;/data/users.json\&quot;:\&quot;This file does not contain any classes or functions. It appears to be a JSON array of user credentials, with each object containing a `username` and `password` property. The file seems to be a collection of 50 user accounts with the username `user1` through `user50` and the password `\\\&quot;sim\\\&quot;`, as well as one user account with the username `\\\&quot;aa\\\&quot;` and the password `\\\&quot;aa\\\&quot;`.\&quot;,\&quot;/services/frontend/streamlitapp.py\&quot;:\&quot;This file is a Streamlit application that provides a web-based interface for interacting with a machine learning model for predicting energy efficiency. It does not contain any classes, but it does define several functions:\\n\\n`st.set_page_config`: Configures the Streamlit page with a custom title, icon, and layout.\\n`st.markdown`: Applies custom CSS styles to the Streamlit application.\\n`st.session_state`: Manages the state of the application, including login status and case history.\\n`st.sidebar.radio`: Provides a radio button menu for navigating between different pages of the application.\\n`st.sidebar.selectbox`: Allows the user to select a machine learning model from a list of available options.\\n`st.button`: Handles user interactions, such as loading an example, launching a prediction, and saving feedback.\\n`st.number_input`: Allows the user to input feature values for the machine learning model.\\n`st.slider`: Allows the user to select a priority level for the control.\\n`st.text_area`: Allows the user to provide a comment.\\n`st.progress`: Displays a progress bar to indicate the completion of the input fields.\\n`st.toast`: Displays a notification when the user\\u0027s feedback is saved.\\n`st.download_button`: Provides a button to download the prediction results as a CSV file.\\n`st.subheader`: Displays a subheader for the SHAP interpretation section.\\n`st.dataframe`: Displays the prediction history in a tabular format.\\n`st.info`: Displays an informative message when there is no prediction history.\\n`st.title`: Sets the title of the different pages in the application.\\n`st.chat_input`: Provides a chat input field for the user to ask questions.\\n`st.chat_message`: Displays the assistant\\u0027s response in the chat.\\n`st.expander`: Creates expandable sections in the FAQ page.\&quot;,\&quot;/services/ml-controller/test_ML.py\&quot;:\&quot;This file does not contain any classes or functions. Instead, it performs the following tasks:\\n\\n1. Defines the directory paths for the model and scaler files.\\n2. Loads the scaler object from the specified file.\\n3. Defines the list of feature names expected by the models.\\n4. Loads all the model files (except the scaler) from the specified directory.\\n5. Prompts the user to enter values for each feature.\\n6. Scales the input values using the loaded scaler.\\n7. Predicts the output for each loaded model and displays the results, including the prediction and the probability (if available).\\n\\nThe purpose of this file is to provide a way to load and use pre-trained machine learning models and a scaler for making predictions on new input data.\&quot;,\&quot;/services/frontend/frontend.py\&quot;:\&quot;This file is a Flask web application that provides a user interface for interacting with various services, such as sensor data visualization, machine learning control, manual fan control, green meter, and a data feed. It also includes a workload simulator and proxy routes for interacting with the workload tester service. The application handles user authentication and authorization, and provides a consistent user experience across the different services.\\n\\n`restrict_access`: Restricts access to the application\\u0027s routes, redirecting unauthenticated users to the login page.\\n\\n`index`: Redirects the user to the feed page if they are logged in, or the login page if they are not.\\n\\n`login`: Handles user login, authenticating the user and storing their session information.\\n\\n`register`: Handles user registration, creating a new user account.\\n\\n`logout`: Logs the user out of the application, clearing their session information.\\n\\n`sensors`: Retrieves and displays sensor data from the sensor service.\\n\\n`ml_control`: Retrieves and displays the status of the machine learning control service.\\n\\n`manual_control`: Allows the user to set the speed of the manual fan control service.\\n\\n`greenmeter`: Retrieves and displays the green meter score from the green meter service.\\n\\n`feed`: Allows the user to view and post updates to the data feed service.\\n\\n`workload`: Renders the workload simulator page.\\n\\n`proxy_start`: Proxies a request to start the workload tester service.\\n\\n`proxy_stop`: Proxies a request to stop the workload tester service.\\n\\n`proxy_status`: Proxies a request to get the status of the workload tester service.\&quot;,\&quot;/services/ml-controller/Entrainement Multimodel.py\&quot;:\&quot;This file is a Python script that trains and evaluates several machine learning models for a fan activation logic problem. It loads a dataset, preprocesses the data, trains and evaluates multiple models, and saves the trained models and their performance metrics.\\n\\nThe file does not contain any classes, but it does contain the following functions:\\n\\n`train_test_split`: Splits the dataset into training and testing sets.\\n`StandardScaler`: Standardizes the input features.\\n`accuracy_score`: Calculates the accuracy score of a model\\u0027s predictions.\\n`permutation_importance`: Calculates the feature importance using permutation importance.\\n`RandomForestClassifier`, `GradientBoostingClassifier`, `LogisticRegression`, `LinearSVC`, `KNeighborsClassifier`, `DecisionTreeClassifier`: These are the machine learning models used in the script.\&quot;,\&quot;/services/frontend/templates/greenmeter.html\&quot;:\&quot;This file appears to be a Jinja2 template for a web page. It does not contain any classes or functions, but rather defines the content for a page called \\\&quot;Greenmeter\\\&quot; that extends a base template.\\n\\nThe file does the following:\\n\\n1. Extends the \\u0027base.html\\u0027 template, which likely contains the overall structure and layout of the web page.\\n2. Defines the content block for the \\u0027Greenmeter\\u0027 page, which includes an h1 heading and a placeholder paragraph.\&quot;,\&quot;/services/frontend/templates/home.html\&quot;:\&quot;This file does not contain any classes or functions. It is a Jinja2 template file that extends the \\u0027base.html\\u0027 template and defines the content for the \\u0027Home\\u0027 page. The template includes a heading \\u0027Home\\u0027 and a paragraph \\u0027This is a placeholder page for home.\\u0027\&quot;,\&quot;/services/frontend/templates/sensors.html\&quot;:\&quot;This file appears to be a Django template that displays a sensor dashboard with temperature, humidity, and power usage information, as well as a table of sensor status. There are no classes or functions defined in this file, but it uses the following HTML elements and JavaScript code:\\n\\n`{% extends \\u0027base.html\\u0027 %}`: Extends the base HTML template.\\n`{% block content %}`: Defines the content block for the template.\\n`\\u003cdiv class\\u003d\\\&quot;container\\\&quot;\\u003e`: Creates a container for the dashboard content.\\n`\\u003cdiv class\\u003d\\\&quot;row g-4 mb-4\\\&quot;\\u003e`: Creates a row with three columns for the sensor cards.\\n`\\u003cdiv class\\u003d\\\&quot;card h-100\\\&quot;\\u003e`: Creates a card for each sensor data.\\n`\\u003ccanvas id\\u003d\\\&quot;tempChart\\\&quot;\\u003e`: Initializes a chart.js chart for temperature data.\\n`\\u003ccanvas id\\u003d\\\&quot;humidityChart\\\&quot;\\u003e`: Initializes a chart.js chart for humidity data.\\n`\\u003ccanvas id\\u003d\\\&quot;powerChart\\\&quot;\\u003e`: Initializes a chart.js chart for power usage data.\\n`\\u003ccanvas id\\u003d\\\&quot;historyChart\\\&quot;\\u003e`: Initializes a chart.js chart for historical data.\\n`\\u003ctable class\\u003d\\\&quot;table table-striped table-hover\\\&quot;\\u003e`: Creates a table for sensor status information.\\n`\\u003cscript src\\u003d\\\&quot;https://cdn.jsdelivr.net/npm/chart.js\\\&quot;\\u003e`: Includes the Chart.js library.\\n`\\u003cscript\\u003e`: Initializes the chart.js charts with sample data.\&quot;,\&quot;/data/posts.json\&quot;:\&quot;This file does not contain any classes or functions. It appears to be a JSON-formatted document that contains a list of messages, each with a username, text, and timestamp. The messages seem to be related to a chat or messaging application, and the file likely serves as a data storage or exchange format for these messages.\&quot;,\&quot;/services/frontend/templates/login.html\&quot;:\&quot;This file appears to be a Django template for a login page. It does not contain any classes or functions, but rather HTML and Jinja2 template code to render the login form and handle error messages. The template extends a base template and includes the following sections:\\n\\n`{% extends \\u0027base.html\\u0027 %}`: Extends the base template.\\n`{% block content %}`: Defines the content block for the template.\\n`\\u003cdiv class\\u003d\\\&quot;row justify-content-center mt-5\\\&quot;\\u003e`: Renders the login form in a centered column.\\n`{% if message %}`: Displays an error message if there is one.\\n`\\u003cform method\\u003d\\\&quot;POST\\\&quot;\\u003e`: Renders the login form with username and password fields.\\n`\\u003cdiv class\\u003d\\\&quot;d-grid gap-2\\\&quot;\\u003e`: Renders the login button.\\n`\\u003cdiv class\\u003d\\\&quot;text-center mt-4\\\&quot;\\u003e`: Renders a link to the registration page.\&quot;,\&quot;/services/frontend/static/css/styles.css\&quot;:\&quot;This file appears to be a CSS stylesheet that defines the styles for a website. It does not contain any classes or functions, but rather a set of CSS rules and variables that define the visual appearance of the website. Here\\u0027s a summary of the main elements in the file:\\n\\n`:root`: Defines a set of CSS variables that can be used throughout the stylesheet.\\n\\n`body`: Defines the default styles for the body of the webpage, including the background color, font, and text color.\\n\\n`.navbar`: Defines the styles for the navigation bar, including the background color, box shadow, and hover effects.\\n\\n`.navbar-brand`: Defines the styles for the brand/logo in the navigation bar.\\n\\n`.nav-link`: Defines the styles for the navigation links, including the font weight and hover effects.\\n\\n`.container`: Defines the maximum width for the main content container.\\n\\n`.card`: Defines the styles for card elements, including the border, box shadow, and hover effects.\\n\\n`.btn-primary`: Defines the styles for the primary button, including the background and border colors.\\n\\n`.alert`: Defines the styles for alert boxes, including the border radius.\\n\\n`.footer`: Defines the styles for the website footer, including the background color and text color.\\n\\nThe file also includes some responsive adjustments for the navigation bar at smaller screen sizes.\&quot;,\&quot;/services/frontend/templates/register.html\&quot;:\&quot;This file appears to be a Jinja2 template for a registration page in a web application. It does not contain any classes or functions, but rather defines the structure and content of the registration page. The template extends a base HTML template and includes a form for users to enter a username and password, as well as a link to the login page for users who already have an account.\&quot;,\&quot;/services/ml-controller/collect_data.py\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`read_dht22()`: Reads the humidity and temperature from a DHT22 sensor.\\n\\n`read_bmp280()`: Reads the atmospheric pressure from a BMP280 sensor.\\n\\n`read_acs712()`: Returns a simulated current value, or raises an error if real current reading is not implemented.\\n\\nThe file also includes configuration settings for the DHT22 and BMP280 sensors.\&quot;,\&quot;/services/frontend/templates/base.html\&quot;:\&quot;This file appears to be a Flask template for a web application called \\\&quot;Green Cloud\\\&quot;. It does not contain any classes or functions, but rather defines the structure and layout of the web pages. Here\\u0027s a summary of what the file does:\\n\\n1. It sets up the HTML structure of the web page, including the header, navigation menu, main content area, and footer.\\n2. It uses Bootstrap CSS framework for styling and layout.\\n3. It includes various icons from the Font Awesome library.\\n4. It checks if the user is logged in and displays the appropriate navigation menu.\\n5. It displays any flash messages (success or error messages) that may have been set by the Flask application.\\n6. It provides a main content area where the specific page content can be inserted using Jinja2 templates.\\n7. It includes the necessary JavaScript files for Bootstrap functionality.\\n\\nOverall, this file serves as the base template for the Green Cloud web application, providing a consistent layout and structure across all pages.\&quot;,\&quot;/services/ml-controller/Entrainement Modele_Unique.py\&quot;:\&quot;This file does not contain any classes or functions. Instead, it is a Python script that performs the following tasks:\\n\\n1. Reads a dataset from a specified file path, which can be set using an environment variable.\\n2. Preprocesses the data by scaling the features using a StandardScaler.\\n3. Splits the data into training and testing sets.\\n4. Trains a RandomForestRegressor model on the training data.\\n5. Saves the trained model and the scaler to specified file paths, which can also be set using environment variables.\\n6. Generates a SHAP summary plot to visualize the feature importance of the trained model.\&quot;,\&quot;/sensors/bmp280_reader.py\&quot;:\&quot;This file is a Python script that uses the Adafruit BMP280 library to read temperature, pressure, and altitude data from a BMP280 sensor connected to a Raspberry Pi or other compatible board.\\n\\n`busio.I2C`: Initializes the I2C bus communication.\\n`adafruit_bmp280.Adafruit_BMP280_I2C`: Initializes the BMP280 sensor and provides methods to read temperature, pressure, and altitude data.\\n\\nThe script sets up the I2C communication, initializes the BMP280 sensor, and then enters a loop where it continuously reads and prints the temperature, pressure, and estimated altitude every 2 seconds.\&quot;,\&quot;/services/workload-tester/workload_tester.py\&quot;:\&quot;This file does not contain any classes. It is a Flask application that simulates a social media platform with users posting content at a specified rate. Here are the functions in the file:\\n\\n`generate_random_post`: Generates a random post of a specified length.\\n\\n`simulation_loop`: Runs the simulation loop, updating the active users, generating posts, and updating the activity feed.\\n\\n`start_simulation`: Starts the simulation with the provided parameters.\\n\\n`stop_simulation`: Stops the running simulation.\\n\\n`get_status`: Returns the current status of the running simulation.\\n\\nThe file sets up a Flask application with three routes: `/start`, `/stop`, and `/status`. The `/start` route allows the user to start a simulation with various parameters, the `/stop` route allows the user to stop a running simulation, and the `/status` route returns the current status of the running simulation.\&quot;,\&quot;/services/frontend/templates/workflow.html\&quot;:\&quot;This file is a Django template that provides a web interface for a workload simulator. It includes HTML, CSS, and JavaScript code to create a user interface with simulation controls, live statistics, and an activity feed. The file does not contain any explicit class definitions, but it does define several functions:\\n\\n`safeJson`: A function that safely parses JSON responses, handling errors gracefully.\\n`updateChartData`: A function that updates the data displayed in the Chart.js chart.\\n`pollStatus`: A function that periodically fetches the current status of the simulation and updates the user interface accordingly.\\n`startSimulation`: A function that is called when the user clicks the \\\&quot;Start Simulation\\\&quot; button, which sends a request to the server to start the simulation and sets up the polling interval.\\n`stopSimulation`: A function that is called when the user clicks the \\\&quot;Stop Simulation\\\&quot; button, which sends a request to the server to stop the simulation and clears the polling interval.\\n\\nOverall, this file provides a user interface for a workload simulator, allowing users to configure the simulation parameters and view real-time statistics and activity.\&quot;,\&quot;/README.md\&quot;:\&quot;This file does not contain any classes or functions. It is a README file that provides an overview of the \\\&quot;GREEN-CLOUD\\\&quot; project, which is a modular and containerized platform for monitoring, predicting, and controlling a micro data center based on Raspberry Pi, IoT sensors, and machine learning models. The file covers the project\\u0027s context and objectives, architecture and repository structure, prerequisites, installation and local execution, detailed microservices, sensor management, dataset and machine learning training, feature importance analysis, and future plans for Docker and Kubernetes deployment.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/MOHAMED ALI REBBAH/PycharmProjects/Green-Cloud&quot;:&quot;{\&quot;/data/posts.json\&quot;:{\&quot;file_path\&quot;:\&quot;/data/posts.json\&quot;,\&quot;file_name\&quot;:\&quot;posts.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/data/users.json\&quot;:{\&quot;file_path\&quot;:\&quot;/data/users.json\&quot;,\&quot;file_name\&quot;:\&quot;users.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/sensors/bmp280_reader.py\&quot;:{\&quot;file_path\&quot;:\&quot;/sensors/bmp280_reader.py\&quot;,\&quot;file_name\&quot;:\&quot;bmp280_reader.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/sensors/dht22_reader.py\&quot;:{\&quot;file_path\&quot;:\&quot;/sensors/dht22_reader.py\&quot;,\&quot;file_name\&quot;:\&quot;dht22_reader.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/sensors/sct013_reader.py\&quot;:{\&quot;file_path\&quot;:\&quot;/sensors/sct013_reader.py\&quot;,\&quot;file_name\&quot;:\&quot;sct013_reader.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;lire_adc\&quot;,\&quot;method_parameters\&quot;:\&quot;(channel)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;channel\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[10,0],[14,15]]},{\&quot;method_name\&quot;:\&quot;lire_courant\&quot;,\&quot;method_parameters\&quot;:\&quot;(channel, calibration\\u003d60.6)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;channel\&quot;},{\&quot;type\&quot;:\&quot;60.6\&quot;,\&quot;name\&quot;:\&quot;calibration\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[16,0],[30,18]]}]},\&quot;/services/data-collector/app.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/data-collector/app.py\&quot;,\&quot;file_name\&quot;:\&quot;app.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;load_json\&quot;,\&quot;method_parameters\&quot;:\&quot;(filepath)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;filepath\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[12,0],[16,27]]},{\&quot;method_name\&quot;:\&quot;save_json\&quot;,\&quot;method_parameters\&quot;:\&quot;(filepath, data)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;filepath\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;data\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[18,0],[20,36]]},{\&quot;method_name\&quot;:\&quot;register\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[23,0],[30,63]]},{\&quot;method_name\&quot;:\&quot;login\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[33,0],[39,59]]},{\&quot;method_name\&quot;:\&quot;post\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[42,0],[52,52]]},{\&quot;method_name\&quot;:\&quot;get_posts\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[55,0],[57,30]]}]},\&quot;/services/frontend/static/css/styles.css\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/static/css/styles.css\&quot;,\&quot;file_name\&quot;:\&quot;styles.css\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/base.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/base.html\&quot;,\&quot;file_name\&quot;:\&quot;base.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/feed.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/feed.html\&quot;,\&quot;file_name\&quot;:\&quot;feed.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/greenmeter.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/greenmeter.html\&quot;,\&quot;file_name\&quot;:\&quot;greenmeter.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/home.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/home.html\&quot;,\&quot;file_name\&quot;:\&quot;home.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/login.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/login.html\&quot;,\&quot;file_name\&quot;:\&quot;login.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/manual_control.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/manual_control.html\&quot;,\&quot;file_name\&quot;:\&quot;manual_control.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/ml_control.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/ml_control.html\&quot;,\&quot;file_name\&quot;:\&quot;ml_control.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/register.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/register.html\&quot;,\&quot;file_name\&quot;:\&quot;register.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/sensors.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/sensors.html\&quot;,\&quot;file_name\&quot;:\&quot;sensors.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/templates/workflow.html\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/templates/workflow.html\&quot;,\&quot;file_name\&quot;:\&quot;workflow.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/frontend/frontend.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/frontend.py\&quot;,\&quot;file_name\&quot;:\&quot;frontend.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;restrict_access\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Optional[Response]\&quot;,\&quot;scope\&quot;:[[25,0],[28,41]]},{\&quot;method_name\&quot;:\&quot;index\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[31,0],[32,93]]},{\&quot;method_name\&quot;:\&quot;login\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Union[str, Response]\&quot;,\&quot;scope\&quot;:[[35,0],[56,72]]},{\&quot;method_name\&quot;:\&quot;register\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Union[str, Response]\&quot;,\&quot;scope\&quot;:[[59,0],[78,78]]},{\&quot;method_name\&quot;:\&quot;logout\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;Response\&quot;,\&quot;scope\&quot;:[[81,0],[83,37]]},{\&quot;method_name\&quot;:\&quot;sensors\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;str\&quot;,\&quot;scope\&quot;:[[86,0],[93,70]]},{\&quot;method_name\&quot;:\&quot;ml_control\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;str\&quot;,\&quot;scope\&quot;:[[96,0],[103,76]]},{\&quot;method_name\&quot;:\&quot;manual_control\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;str\&quot;,\&quot;scope\&quot;:[[106,0],[123,94]]},{\&quot;method_name\&quot;:\&quot;greenmeter\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;str\&quot;,\&quot;scope\&quot;:[[126,0],[133,76]]},{\&quot;method_name\&quot;:\&quot;feed\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;str\&quot;,\&quot;scope\&quot;:[[136,0],[156,83]]},{\&quot;method_name\&quot;:\&quot;workload\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;str\&quot;,\&quot;scope\&quot;:[[159,0],[160,71]]},{\&quot;method_name\&quot;:\&quot;proxy_start\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[163,0],[168,69]]},{\&quot;method_name\&quot;:\&quot;proxy_stop\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[171,0],[176,69]]},{\&quot;method_name\&quot;:\&quot;proxy_status\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[179,0],[184,69]]}]},\&quot;/services/frontend/streamlitapp.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/frontend/streamlitapp.py\&quot;,\&quot;file_name\&quot;:\&quot;streamlitapp.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/ml-controller/collect_data.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/ml-controller/collect_data.py\&quot;,\&quot;file_name\&quot;:\&quot;collect_data.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;read_dht22\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[22,0],[25,32]]},{\&quot;method_name\&quot;:\&quot;read_bmp280\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[28,0],[31,24]]},{\&quot;method_name\&quot;:\&quot;read_acs712\&quot;,\&quot;method_parameters\&quot;:\&quot;(simulate\\u003dTrue)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;True\&quot;,\&quot;name\&quot;:\&quot;simulate\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[34,0],[40,77]]}]},\&quot;/services/ml-controller/Entrainement Modele_Unique.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/ml-controller/Entrainement Modele_Unique.py\&quot;,\&quot;file_name\&quot;:\&quot;Entrainement Modele_Unique.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/ml-controller/Entrainement Multimodel.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/ml-controller/Entrainement Multimodel.py\&quot;,\&quot;file_name\&quot;:\&quot;Entrainement Multimodel.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/ml-controller/test_ML.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/ml-controller/test_ML.py\&quot;,\&quot;file_name\&quot;:\&quot;test_ML.py\&quot;,\&quot;methods\&quot;:[]},\&quot;/services/workload-tester/workload_tester.py\&quot;:{\&quot;file_path\&quot;:\&quot;/services/workload-tester/workload_tester.py\&quot;,\&quot;file_name\&quot;:\&quot;workload_tester.py\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;generate_random_post\&quot;,\&quot;method_parameters\&quot;:\&quot;(length)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;length\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[26,0],[28,65]]},{\&quot;method_name\&quot;:\&quot;simulation_loop\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[30,0],[72,21]]},{\&quot;method_name\&quot;:\&quot;start_simulation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[76,0],[105,53]]},{\&quot;method_name\&quot;:\&quot;stop_simulation\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[108,0],[114,53]]},{\&quot;method_name\&quot;:\&quot;get_status\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[117,0],[127,10]]}]},\&quot;/templates/login.html\&quot;:{\&quot;file_path\&quot;:\&quot;/templates/login.html\&quot;,\&quot;file_name\&quot;:\&quot;login.html\&quot;,\&quot;methods\&quot;:[]},\&quot;/README.md\&quot;:{\&quot;file_path\&quot;:\&quot;/README.md\&quot;,\&quot;file_name\&quot;:\&quot;README.md\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>